<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>iTunes Web App</title>
  <!-- Fuente Roboto -->
  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
  <style>
    /* Reset & Base */
    * { margin: 0; padding: 0; box-sizing: border-box; }
    body { font-family: 'Roboto', sans-serif; background: #000; color: #fff; display: flex; flex-direction: column; height: 100vh; }

    /* Tab Bar Superior */
    .tab-bar { display: flex; overflow-x: auto; background: #111; position: fixed; top: 0; width: 100%; z-index: 10; }
    .tab-bar button { flex: 1; padding: 12px 8px; background: none; border: none; color: #888; font-size: 14px; cursor: pointer; }
    .tab-bar button.active, .tab-bar button:hover { color: #fff; border-bottom: 2px solid #1DB954; }

    /* Contenido de pestaña */
    .tab-contents { flex: 1; margin-top: 50px; padding: 10px; overflow-y: auto; padding-bottom: 80px; }
    .tab-content { display: none; }
    .tab-content.active { display: block; }

    /* Listado de ítems */
    .list { display: grid; grid-template-columns: repeat(auto-fill, minmax(120px, 1fr)); gap: 10px; }
    .item { background: #222; padding: 10px; border-radius: 8px; text-align: center; position: relative; }
    .item img { width: 100%; border-radius: 4px; }
    .favorite-btn { position: absolute; top: 8px; right: 8px; background: rgba(0,0,0,0.5); border: none; color: #fff; font-size: 18px; cursor: pointer; border-radius: 50%; width: 28px; height: 28px; line-height: 28px; }
    .item audio { width: 100%; margin-top: 8px; border-radius: 4px; }

    /* Buscador & Filtro */
    .search-filter { display: flex; margin-bottom: 10px; }
    .search-filter input { flex: 1; padding: 8px; border: none; border-radius: 4px 0 0 4px; }
    .search-filter select { padding: 8px; border: none; border-radius: 0 4px 4px 0; }

    /* Menú inferior igual a Tab Bar */
    .bottom-nav { display: flex; overflow-x: auto; background: #111; position: fixed; bottom: 0; width: 100%; z-index: 10; }
    .bottom-nav button { flex: 1; padding: 12px 8px; background: none; border: none; color: #888; font-size: 14px; cursor: pointer; }
    .bottom-nav button.active, .bottom-nav button:hover { color: #fff; border-top: 2px solid #1DB954; }
  </style>
</head>
<body>
  <div id="app">
    <!-- Tab Bar Superior -->
    <div class="tab-bar">
      <button data-tab="home" class="active">Inicio</button>
      <button data-tab="music">Música</button>
      <button data-tab="movies">Películas</button>
      <button data-tab="tones">Tonos</button>
      <button data-tab="charts">Charts</button>
      <button data-tab="info">Info</button>
    </div>

    <!-- Contenido de pestañas -->
    <div class="tab-contents">
      <section id="home" class="tab-content active">
        <h1>Destacados</h1>
        <div class="list" id="home-list"></div>
      </section>
      <section id="music" class="tab-content">
        <h1>Búsqueda de Música</h1>
        <div class="search-filter">
          <input type="text" id="search-input" placeholder="Buscar...">
          <select id="media-filter">
            <option value="">Todos</option>
            <option value="music">Música</option>
            <option value="album">Álbum</option>
          </select>
        </div>
        <div class="list" id="music-list"></div>
      </section>
      <section id="movies" class="tab-content">
        <h1>Películas</h1>
        <div class="list" id="movies-list"></div>
      </section>
      <section id="tones" class="tab-content">
        <h1>Tonos</h1>
        <div class="list" id="tones-list"></div>
      </section>
      <section id="charts" class="tab-content">
        <h1>Charts</h1>
        <div class="list" id="charts-list"></div>
      </section>
      <section id="info" class="tab-content">
        <h1>Información de la App</h1>
        <p>iTunes Web App consume la API pública de iTunes para buscar y reproducir previews de canciones, videos y más.</p>
        <ul>
          <li>Versión: 1.0</li>
          <li>Desarrollador: Tu Nombre</li>
          <li>Contacto: tu.email@ejemplo.com</li>
          <li>Repositorio: <a href="#" style="color:#1DB954;">GitHub</a></li>
        </ul>
      </section>
      <section id="favorites" class="tab-content">
        <h1>Favoritos</h1>
        <div class="list" id="favorites-list"></div>
      </section>
    </div>

    <!-- Menú inferior como Tab Bar -->
    <nav class="bottom-nav">
      <button data-nav="home" class="active">Inicio</button>
      <button data-nav="music">Música</button>
      <button data-nav="favorites">Favoritos</button>
      <button data-nav="info">Info</button>
    </nav>
  </div>

  <script>
    const API_BASE = 'https://itunes.apple.com';

    // Manejo de pestañas superiores
    const tabs = document.querySelectorAll('.tab-bar button');
    const contents = document.querySelectorAll('.tab-content');
    tabs.forEach(btn => btn.addEventListener('click', () => setActiveTab(btn.dataset.tab)));
    function setActiveTab(tabId) {
      tabs.forEach(b => b.classList.toggle('active', b.dataset.tab === tabId));
      contents.forEach(c => c.classList.toggle('active', c.id === tabId));
      document.querySelectorAll('.bottom-nav button').forEach(nav => nav.classList.toggle('active', nav.dataset.nav === tabId));
    }

    // Menú inferior
    document.querySelectorAll('.bottom-nav button').forEach(btn => btn.addEventListener('click', () => setActiveTab(btn.dataset.nav)));

    // Fetch y renderizado genérico con fallback
    async function fetchAndRender(endpoint, containerId, params = {}) {
      const url = new URL(`${API_BASE}${endpoint}`);
      Object.entries(params).forEach(([k, v]) => v && url.searchParams.append(k, v));
      const res = await fetch(url);
      const { results } = await res.json();
      const container = document.getElementById(containerId);
      if (!results || !results.length) {
        container.innerHTML = '<p style="color:#888; text-align:center;">No hay resultados disponibles</p>';
        return;
      }
      container.innerHTML = results.map((item, i) => `
        <div class="item">
          <img src="${item.artworkUrl100}" alt="${item.trackName || item.collectionName}" />
          <button class="favorite-btn" title="Agregar a favoritos">★</button>
          <p>${item.trackName || item.collectionName}</p>
          ${item.previewUrl ? `<audio controls src="${item.previewUrl}"></audio>` : ''}
        </div>
      `).join('');
      container.querySelectorAll('.favorite-btn').forEach((btn, idx) => btn.addEventListener('click', () => addToFavorites(results[idx])));
    }

    // Carga inicial
    window.addEventListener('DOMContentLoaded', () => {
      fetchAndRender('/search', 'home-list',   { term: 'top songs',    media: 'music',    limit: 20 });
      fetchAndRender('/search', 'music-list',  { term: 'pop',          media: 'music',    limit: 20 });
      fetchAndRender('/search', 'movies-list', { term: 'drama',        media: 'movie',    limit: 20 });
      fetchAndRender('/search', 'tones-list',  { term: 'ringtone',     entity: 'ringtone',limit: 20 });
      fetchAndRender('/search', 'charts-list', { term: 'top',          media: 'music',    limit: 20 });
      renderFavorites();
    });

    // Buscador con debounce
    const searchInput = document.getElementById('search-input');
    const filterSelect = document.getElementById('media-filter');
    let debounce;
    [searchInput, filterSelect].forEach(el => el.addEventListener('input', () => {
      clearTimeout(debounce);
      debounce = setTimeout(() => {
        fetchAndRender('/search', 'music-list', { term: searchInput.value.trim(), media: filterSelect.value, limit: 20 });
      }, 400);
    }));

    // Favoritos
    function addToFavorites(item) {
      const favs = JSON.parse(localStorage.getItem('favs') || '[]');
      if (!favs.some(f => f.trackId === item.trackId)) {
        favs.push(item);
        localStorage.setItem('favs', JSON.stringify(favs));
        renderFavorites();
      }
    }
    function renderFavorites() {
      const favs = JSON.parse(localStorage.getItem('favs') || '[]');
      const list = document.getElementById('favorites-list');
      if (!favs.length) {
        list.innerHTML = '<p style="color:#888; text-align:center;">Aún no tienes favoritos</p>';
        return;
      }
      list.innerHTML = favs.map(item => `
        <div class="item">
          <img src="${item.artworkUrl100}" alt="${item.trackName || item.collectionName}" />
          <p>${item.trackName || item.collectionName}</p>
          ${item.previewUrl ? `<audio controls src="${item.previewUrl}"></audio>` : ''}
        </div>
      `).join('');
    }
  </script>
</body>
</html>
